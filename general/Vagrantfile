# -*- mode: ruby -*-
# vi: set ft=ruby :

# Vagrantfile API/syntax version. Don't touch unless you know what you're doing!
VAGRANTFILE_API_VERSION = "2"

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  # All Vagrant configuration is done here. The most common configuration
  # options are documented and commented below. For a complete reference,
  # please see the online documentation at vagrantup.com.

  # Every Vagrant virtual environment requires a box to build off of.
  config.vm.box = "precise64"

  # The url from where the 'config.vm.box' box will be fetched if it
  # doesn't already exist on the user's system.
  config.vm.box_url = "http://files.vagrantup.com/precise64.box"

  # networking
  # config.vm.network :hostonly, "192.168.255.1"
  # config.vm.network "private_network", ip: "192.168.50.4"
  config.vm.network :forwarded_port, host: 3000, guest: 3000
  config.vm.network :forwarded_port, host: 8000, guest: 8000
  config.vm.network :forwarded_port, host: 4000, guest: 4000

  config.berkshelf.enabled = true

  # customization
  config.vm.provider :virtualbox do |vb|
    vb.customize ["modifyvm", :id, "--memory", 3072]
  end

  # provisioning
  config.vm.provision :chef_solo do |chef|
    # chef.cookbooks_path = ["cookbooks"]
    chef.add_recipe "build-essential"
    chef.add_recipe "apt::default"
    chef.add_recipe "mc"
    chef.add_recipe "git::source"
    chef.add_recipe "nvm"
    chef.add_recipe "zsh"
    chef.add_recipe "vagrant-zsh"
    chef.add_recipe "oh-my-zsh"
    chef.add_recipe "curl"
    chef.add_recipe "ntp"
    chef.add_recipe "rvm::default"
    chef.add_recipe "rvm::user"
    chef.add_recipe "redisio::install"
    chef.add_recipe "redisio::enable"
    chef.add_recipe "memcached"
    chef.add_recipe "java::default"
    chef.add_recipe "mongodb::10gen_repo"
    chef.add_recipe "mongodb"
    chef.add_recipe "phantomjs::default"
    chef.add_recipe "imagemagick"
    chef.add_recipe "heroku"
    chef.add_recipe "postgresql::client"
    chef.add_recipe "postgresql::server"
    chef.add_recipe "mysql::client"
    chef.add_recipe "mysql::server"

    chef.json = {
      :nvm => {
        :user => "vagrant",
        :group => "vagrant",
        :node_versions => ["0.10.18"],
        :default_node_version => "0.10.18"
      },
      :rvm => {
        # version, branch, intaller_url because: https://github.com/fnichol/chef-rvm/issues/159
        :version => "1.19.6",
        :branch => "none",
        :installer_url => "https://raw.github.com/wayneeseguin/rvm/master/binscripts/rvm-installer",
        :user_installs => [
          {
            'user'          => 'vagrant',
            'default_ruby'  => 'ruby-1.9.3-p392',
            'rubies'        => ['ruby-1.9.3-p392', 'ree-1.8.7-2011.03']
          }
        ]
      },
      :java => {
        :oracle => {
          "accept_oracle_download_terms" => true
        }
      },
      :mongodb => {
        :package_version => "2.4.0",
        # :dbpath => "/home/vagrant/Work/shared/mongodb/db",
        # :logpath => "/home/vagrant/Work/shared/mongodb/log"
      },
      :git => {
        :version => '1.8.5.3'
      },
      :oh_my_zsh => {
        :users => [{
          :login => 'vagrant',
          :theme => 'af-magic',
          :plugins => %w{git rails ruby rvm sublime virtualenv vagrant bundler}
        }]
      },
      :postgresql => {
        :password => {
          :postgres => "postgres"
        }
      },
      :mysql => {
        :server_root_password => "",
        :server_debian_password => "",
        :server_repl_password => ""

      }
    }
  end  
  
  # copy file contents from host machine
  [ ".ssh/id_dsa", ".ssh/id_rsa", ".gitconfig", ".gitignore"].each do |f|
    if File.exists?("#{Dir.home}/#{f}")
      config.vm.provision :shell, :inline => "echo -e '#{File.read("#{Dir.home}/#{f}")}' > '/home/vagrant/#{f}'"
    else
      puts "warning: ~#{f} can't be found in the host operating system, skipping copying it"
    end
  end

  config.vm.provision :shell, :path => "bootstrap.sh"
  
  # shared folders
  # config.vm.synced_folder "~/Work", "/home/vagrant/Work", :mount_options => ['dmode=777', 'fmode=777'], type: "nfs"
  config.vm.synced_folder "~/Work", "/home/vagrant/Work", type: "nfs"

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # config.vm.network :forwarded_port, guest: 80, host: 8080

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  config.vm.network :private_network, ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network :public_network

  # If true, then any SSH connections made will enable agent forwarding.
  # Default value: false
  # config.ssh.forward_agent = true

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider :virtualbox do |vb|
  #   # Don't boot with headless mode
  #   vb.gui = true
  #
  #   # Use VBoxManage to customize the VM. For example to change memory:
  #   vb.customize ["modifyvm", :id, "--memory", "1024"]
  # end
  #
  # View the documentation for the provider you're using for more
  # information on available options.

  # Enable provisioning with Puppet stand alone.  Puppet manifests
  # are contained in a directory path relative to this Vagrantfile.
  # You will need to create the manifests directory and a manifest in
  # the file precise64.pp in the manifests_path directory.
  #
  # An example Puppet manifest to provision the message of the day:
  #
  # # group { "puppet":
  # #   ensure => "present",
  # # }
  # #
  # # File { owner => 0, group => 0, mode => 0644 }
  # #
  # # file { '/etc/motd':
  # #   content => "Welcome to your Vagrant-built virtual machine!
  # #               Managed by Puppet.\n"
  # # }
  #
  # config.vm.provision :puppet do |puppet|
  #   puppet.manifests_path = "manifests"
  #   puppet.manifest_file  = "site.pp"
  # end

  # Enable provisioning with chef solo, specifying a cookbooks path, roles
  # path, and data_bags path (all relative to this Vagrantfile), and adding
  # some recipes and/or roles.
  #
  # config.vm.provision :chef_solo do |chef|
  #   chef.cookbooks_path = "../my-recipes/cookbooks"
  #   chef.roles_path = "../my-recipes/roles"
  #   chef.data_bags_path = "../my-recipes/data_bags"
  #   chef.add_recipe "mysql"
  #   chef.add_role "web"
  #
  #   # You may also specify custom JSON attributes:
  #   chef.json = { :mysql_password => "foo" }
  # end

  # Enable provisioning with chef server, specifying the chef server URL,
  # and the path to the validation key (relative to this Vagrantfile).
  #
  # The Opscode Platform uses HTTPS. Substitute your organization for
  # ORGNAME in the URL and validation key.
  #
  # If you have your own Chef Server, use the appropriate URL, which may be
  # HTTP instead of HTTPS depending on your configuration. Also change the
  # validation key to validation.pem.
  #
  # config.vm.provision :chef_client do |chef|
  #   chef.chef_server_url = "https://api.opscode.com/organizations/ORGNAME"
  #   chef.validation_key_path = "ORGNAME-validator.pem"
  # end
  #
  # If you're using the Opscode platform, your validator client is
  # ORGNAME-validator, replacing ORGNAME with your organization name.
  #
  # If you have your own Chef Server, the default validation client name is
  # chef-validator, unless you changed the configuration.
  #
  #   chef.validation_client_name = "ORGNAME-validator"
end
